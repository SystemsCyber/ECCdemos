from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import ec
from cryptography.hazmat.primitives.asymmetric import utils
from cryptography.hazmat.primitives import serialization
import base64

PEM_public_key_first = '-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE'
PEM_public_key_last = '\n-----END PUBLIC KEY-----\n'

public_key_hex = [0x0D, 0x5E, 0xDD, 0xA4, 0x80, 0x87, 0xFC, 0xF5, 0x11, 0xDF, 0x17, 0x56, 0x24, 0xD8, 0x55, 0xF6, 
0x3A, 0xB9, 0x38, 0x98, 0x8E, 0x8A, 0xD7, 0x72, 0x24, 0xE1, 0x84, 0x67, 0x9B, 0xEB, 0x18, 0x48, 
0x8C, 0xC2, 0xE2, 0x00, 0xFF, 0x13, 0x1E, 0xA2, 0x43, 0xA1, 0x55, 0x26, 0xA1, 0xAC, 0xF2, 0x9F, 
0x78, 0x87, 0x24, 0xED, 0x73, 0x24, 0xC9, 0x9C, 0x38, 0x21, 0xB4, 0xE9, 0x2F, 0xA1, 0x0F, 0x78]

data_hex = [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 
0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F]

signature_hex = [0x79, 0x29, 0xA7, 0x75, 0xB1, 0xBE, 0xEA, 0xCD, 0xCE, 0x49, 0xB5, 0xC0, 0xA5, 0xDD, 0xAA, 0xE9, 
0x8E, 0x33, 0x0A, 0xA2, 0xED, 0x9C, 0x26, 0x8C, 0xAB, 0x77, 0xBA, 0x9D, 0x86, 0xF8, 0x31, 0xEF, 
0x08, 0x8E, 0x5F, 0xAF, 0x3F, 0x60, 0xF2, 0xAC, 0x7A, 0xAE, 0xA7, 0xAB, 0x37, 0x51, 0x70, 0xD8, 
0x7B, 0xDB, 0x20, 0x1B, 0x3D, 0x66, 0x5D, 0x12, 0x43, 0x75, 0xC5, 0x2F, 0xFB, 0xC8, 0xF6, 0x33


]

data = bytes(data_hex)
print("Data is:", data)
print("")
#Load Public Key
PEM_public_key = base64.b64encode(bytes(public_key_hex)).decode('ascii')
public_key_string = PEM_public_key_first + PEM_public_key[:28]+'\n'+ PEM_public_key[28:] + PEM_public_key_last
serialized_public_teensy = bytes(public_key_string,'ascii')
public_key = serialization.load_pem_public_key(serialized_public_teensy,backend=default_backend())

#Convert Signature to DER format
signature_r = 0
signature_s = 0
for i in range(32):
	signature_r = signature_r<<8|signature_hex[i]
	signature_s = signature_s<<8|signature_hex[i+32]
#print(hex(signature_r))
#print(hex(signature_s))
signature = utils.encode_dss_signature(signature_r,signature_s)
print("Signature is:",signature)
print("")

#Verify the signature
if public_key.verify(signature,data,ec.ECDSA(hashes.SHA256()))== None:
	print("Verify Signature Successfully!")


