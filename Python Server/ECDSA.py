from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import ec
from cryptography.hazmat.primitives.asymmetric import utils
from cryptography.hazmat.primitives import serialization
import base64

PEM_public_key_first = '-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE'
PEM_public_key_last = '\n-----END PUBLIC KEY-----\n'

public_key_hex = [0xCF, 0x6F, 0xA3, 0xDD, 0xC0, 0x76, 0x90, 0xF1, 0x0B, 0x1D, 0x41, 0xCB, 0x57, 0x39, 0xFC, 0x8F, 
0xB9, 0x65, 0xA8, 0xDC, 0xFD, 0xDA, 0x49, 0x40, 0xF7, 0x24, 0x8E, 0xB2, 0xA1, 0x46, 0x36, 0xF8, 
0xE4, 0x23, 0xAC, 0xFD, 0xEC, 0x38, 0x14, 0xD1, 0x43, 0x38, 0x43, 0x25, 0x77, 0x61, 0xA3, 0xD1, 
0x6E, 0xBA, 0x79, 0xD9, 0x69, 0x1A, 0x6B, 0xD4, 0xDC, 0x1A, 0xA7, 0x3E, 0x94, 0xAD, 0xE4, 0xD8]

data_hex = [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 
0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F]

signature_hex = [0x85, 0xC5, 0x5B, 0xE3, 0x8A, 0x8E, 0xB3, 0x71, 0xF7, 0x95, 0x21, 0x04, 0x5A, 0x81, 0xD1, 0x9C, 
0x97, 0x09, 0xD6, 0x45, 0x79, 0xF4, 0x28, 0xF0, 0x09, 0xE1, 0xA3, 0x37, 0x7E, 0xAD, 0x16, 0x61, 
0x5D, 0x19, 0x0B, 0xE4, 0x4F, 0x2B, 0xDF, 0xF7, 0x7B, 0x2B, 0xFE, 0x12, 0x02, 0x7A, 0x6E, 0xF4, 
0xDA, 0x12, 0x06, 0x6C, 0xFB, 0x7F, 0x19, 0xCC, 0x6F, 0x8B, 0xAE, 0x12, 0x8D, 0x2A, 0x1E, 0x4D
]

data = bytes(data_hex)
print("Data is:", data)
#Load Public Key
PEM_public_key = base64.b64encode(bytes(public_key_hex)).decode('ascii')
public_key_string = PEM_public_key_first + PEM_public_key[:28]+'\n'+ PEM_public_key[28:] + PEM_public_key_last
serialized_public_teensy = bytes(public_key_string,'ascii')
public_key = serialization.load_pem_public_key(serialized_public_teensy,backend=default_backend())

#Convert Signature to DER format
signature_r = 0
signature_s = 0
for i in range(32):
	signature_r = signature_r<<8|signature_hex[i]
	signature_s = signature_s<<8|signature_hex[i+32]


signature = utils.encode_dss_signature(signature_r,signature_s)
print("Signature is:",signature)

public_key.verify(signature,data,ec.ECDSA(hashes.SHA256()))